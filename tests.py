from typing import Callable, List, Generic, Tuple

from regexHelper import getPrice, getRoomCount, getFloor

testCases: List[Tuple[List[Tuple[str, int | str]], Callable[[str], None | int | str]]] = [
    (
        [
            ("- 3 –∫–æ–º–Ω–∞—Ç–Ω–∞—è, 4 —ç—Ç–∞–∂, 4 —ç—Ç–∞–∂–Ω—ã–π –¥–æ–º, —Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç, –º–µ–±–µ–ª—å –∏ —Ç–µ—Ö–Ω–∏–∫–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —Ü–µ–Ω–∞: 400$", 400),
            ("üí∞–¶–µ–Ω–∞ - 800 $", 800),
            ("–¶–µ–Ω–∞: 800$", 800),
            ("–¶–µ–Ω–∞ - 650$", 650),
            ("üîπ–¶–µ–Ω–∞ - 900$", 900),
            ("1500$", 1500),
            ("–¶–µ–Ω–∞ $1500", 1500),
            ("–¶–µ–Ω–∞ $   1500", 1500),
            ("üí∞–¶–µ–Ω–∞ - 800", 800),
            ("–¶–µ–Ω–∞: 800", 800),
            ("–¶–µ–Ω–∞ - 650", 650),
            ("üîπ–¶–µ–Ω–∞ - 900", 900),
            ("–¶–µ–Ω–∞1500", 1500),
            ("üí∞–¶–µ–Ω–∞ - 800", 800),
            ("800  –¶–µ–Ω–∞:", 800),
            ("–¶–µ–Ω–∞ - 650   - –¶–µ–Ω–∞", 650),
            ("üîπ–¶–µ–Ω–∞ - 900", 900),
            ("–¶–µ–Ω–∞   1500", 1500),
            ("üîπPrice: 750$", 750),
            ("Price750$", 100),
            ("Price-1111$", 1111),
            ("–¶–µ–Ω–∞:", None),
            ("650", None),
            ("- 3 –∫–æ–º–Ω–∞—Ç–Ω–∞—è, 4 —ç—Ç–∞–∂, 4 —ç—Ç–∞–∂–Ω—ã–π –¥–æ–º, —Ö–æ—Ä–æ—à–∏–π —Ä–µ–º–æ–Ω—Ç, –º–µ–±–µ–ª—å –∏ —Ç–µ—Ö–Ω–∏–∫–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —Ü–µ–Ω–∞:", None),
            ("", None),
        ],
        lambda x: getPrice(x)
    ),
    (
        [
            ("–ö–æ–º–Ω–∞—Ç - 2", "2"),
            ("–ö–æ–º–Ω–∞—Ç - 1-2", "1"),
            ("‚Ä¢ –ö–æ–º–Ω–∞—Ç—ã:2", "2"),
            ("- 1 –∫–æ–º–Ω–∞—Ç–Ω–∞—è –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω–∞—è –≤ 2 –∫–æ–º–Ω–∞—Ç–Ω—É—é", "1"),
            ("–ö–æ–º–Ω–∞—Ç-2", "2"),
            ("üè¢2–≤3 - –∫–æ–º–Ω–∞—Ç–Ω–∞—è 77–∫–≤.–º", "2–≤3"),
            ("Rooms: 2 - 55–º¬≤   +1", "2"),
            ("#3–•–∫–æ–º–Ω  3/8/12", "3"),
            ("2/15/9", "2"),
            ("- –∫–æ–º–Ω–∞—Ç–Ω–∞—è –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω–∞—è –≤ –∫–æ–º–Ω–∞—Ç–Ω—É—é", None),
            ("–ö–æ–º–Ω–∞—Ç-abc", None),
        ],
        lambda x: getRoomCount(x)
    ),
    (
        [
            ("üè¢14-—ç—Ç–∞–∂", 14),
            ("üíÆ–≠—Ç–∞–∂-4", 4),
            ("üî∏–≠—Ç–∞–∂: 42", 42),
            ("2—ç—Ç–∞–∂", 2),
            ("99-—ç—Ç–∞–∂", 99),
            ("0: —ç—Ç–∞–∂", 0),
            ("üîπFloor: 2", 2),
            ("#3–•–∫–æ–º–Ω  3/8/12", 8),
            ("2/1/12", 1),
            ("üîπTotal floors:4 ", None),
            ("4-—ç—Ç–∞–∂–∫–∞", None),
            ("üè¢9-—ç—Ç–∞–∂–Ω–æ–µ", None),
            ("9—ç—Ç–∞–∂–Ω–æ–µ", None),
            ("–∑–¥–∞–Ω–∏–µ 9-—ç—Ç–∞–∂–µ–π", None),
        ],
        lambda x: getFloor(x)
    )
]

def main():
    for (testCaseSet, funcToCall) in testCases:
        for (inputValue, expectedValue) in testCaseSet:
            result = funcToCall(inputValue)
            if (result == expectedValue):
                print(f"Passed: {inputValue}")
            else:
                print(f"Failed: {inputValue} Expected: {expectedValue} Actual: {result}")
        print("-------------")


main()
